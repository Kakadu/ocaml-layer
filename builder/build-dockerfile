#! /usr/bin/env bash
#
# Put together a Dockerfile from options specified on the command line.
# From https://github.com/mjambon/setup-ocaml
#
set -eu -o pipefail

default_cmd='bash -l'
default_os=alpine
default_opam_packages='dune'
default_opam_switch='4.10.0'

usage() {
  cat <<EOF
Put together a sample Dockerfile for setting up an OCaml build environment.
This is intended for building a base image that will be used for automatic
building and testing purposes.

Usage: $(basename "$0") [OPTIONS]
Options:
  --cmd CMD
      Set the 'CMD' line to this instead of the default command.
      See also '--no-cmd'.
      Default: '$default_cmd'.
  --from NAME
      Base Docker image to use. This will be used as is for the FROM line
      of the Dockerfile. See also '--no-from'.
      Default: derived from the value of the '--os' option.
  --create-user USER
      Create the specified non-privileged user account and switch to it.
      The current user must be 'root'.
      Default: stay as the current user.
  --help
      Print this help message and exit.
  --no-cmd
      Don't produce a 'CMD' line. This allows concatenating the output with
      other dockerfile commands.
  --no-from
      Don't produce a 'FROM' line. This allows concatenating the output with
      other dockerfile commands.
  -o DOCKERFILE
      Write the resulting docker file to this file instead of standard output.
  --opam-packages PKG1,PKG2,PKG3
      A comma-separated or whitespace-separated list of opam package names,
      optionally with a version suffix. For example, 'foo.1.2.3' will
      specifically install version '1.2.3' of the 'foo' package.
  --opam-switch SWITCH
      This specifies which version of OCaml to use, optionally with
      some special setup. Run 'opam switch list-available' to see the choices.
      Default, subject to change: '$default_opam_switch'.
  --os OS
      Specify the container's OS family. Currently, the choices are
      'alpine' or 'debian'. For Ubuntu, choose 'debian'. 'alpine' is
      recommended for building statically-linked executables.
      Default: '$default_os'.
EOF
}

# Usage: error "something went wrong"
error() {
  echo "Error: $*" >&2
  exit 1
}

os="$default_os"
cmd="$default_cmd"
no_cmd=false
from=''
no_from=false
create_user=''
dockerfile=''
opam_packages="$default_opam_packages"
opam_switch="$default_opam_switch"

# The commands like '$(echo $...)' are for squashing multiline input into
# a single line, for compatibility with dockerfile syntax. At the time
# of writing the dockerfiles, certains things like lists of packages will
# be formatted as multiple lines regardless.
#
while [[ $# -gt 0 ]]; do
  case "$1" in
    --cmd)
      cmd=$(echo $2)
      shift
    ;;
    --from)
      from=$(echo $2)
      shift
    ;;
    --create-user)
      create_user=$(echo $2)
      shift
    ;;
    --help)
      usage
      exit 0
    ;;
    --no-cmd)
      no_cmd=true
      ;;
    --no-from)
      no_from=true
      ;;
    -o)
      dockerfile=$2
      shift
    ;;
    --opam-packages)
      opam_packages=$(echo $2)
      shift
    ;;
    --opam-switch)
      opam_switch=$(echo $2)
      shift
    ;;
    --os)
      os=$2
      case "$os" in
        alpine|debian)
          ;;
        *)
          error "Unsupported value for --os: '$os'"
      esac
      shift
    ;;
    *)
      error "Unrecognized command line argument: '$1'"
  esac
  shift
done

if [[ -z "$from" ]]; then
  case "$os" in
    alpine)
      from="alpine"
      ;;
    debian)
      from="debian"
      ;;
    *)
      error "Cannot derive 'FROM' field from OS value '$os'. Try '--from'."
  esac
fi

# Print one argument per line, ending each line except the last by a backslash.
#
multiline() {
  while [[ $# -gt 1 ]]; do
    echo "$1"' \'
    echo -n "  "
    shift
  done
  if [[ $# = 1 ]]; then
    echo "$1"
  fi
}

print_create_user() {
  if [[ -n "$create_user" ]]; then
    cat <<EOF
COPY os/$os/create-user ocaml-setup/os/create-user
RUN ./ocaml-setup/os/create-user $create_user
USER $create_user
WORKDIR /home/$create_user
EOF
  else
    echo
  fi
}

if [[ -n "$dockerfile" ]]; then
  exec > "$dockerfile"
fi

cat <<EOF
# Dockerfile generated by '$0 $*'
#
# This sets up a build environment for OCaml.
# Provided by https://github.com/mjambon/setup-ocaml
#
$([[ "$no_from" = true ]] || echo "FROM $from")
COPY os/$os/setup ocaml-setup/os/setup
RUN ./ocaml-setup/os/setup

$(print_create_user)
COPY opam/install-ocaml ocaml-setup/opam/install-ocaml
RUN ./ocaml-setup/opam/install-ocaml '$opam_switch'

COPY opam/install-opam-packages ocaml-setup/opam/install-opam-packages
RUN $(multiline ./ocaml-setup/opam/install-opam-packages $opam_packages)
$([[ "$no_cmd" = true ]] || (echo; echo "CMD $cmd") )
EOF
